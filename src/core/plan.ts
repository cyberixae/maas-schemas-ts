/*

undefined
OpenTripPlanner compatible format for plans, extended with id for legs and itineraries

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as UnitsGeo_ from 'src/core/components/units-geo';
import * as Units_ from 'src/core/components/units';
import * as Itinerary_ from 'src/core/itinerary';

export const schemaId = 'http://maasglobal.com/core/plan.json';
// Itineraries
// The purpose of this remains a mystery
export type Itineraries = t.Branded<Array<Itinerary_.Default>, ItinerariesBrand>;
export const Itineraries = t.brand(
  t.array(Itinerary_.Default),
  (x): x is t.Branded<Array<Itinerary_.Default>, ItinerariesBrand> => true,
  'Itineraries',
);
export interface ItinerariesBrand {
  readonly Itineraries: unique symbol;
}
// Plan1
// The purpose of this remains a mystery
export type Plan1 = t.Branded<
  {
    from?: UnitsGeo_.Place;
    planId?: Units_.Uuid;
    outwards?: Itineraries;
    returns?: Itineraries;
  } & {
    from: unknown;
    planId: unknown;
    outwards: unknown;
    returns: unknown;
  },
  Plan1Brand
>;
export const Plan1 = t.brand(
  t.intersection([
    t.partial({
      from: UnitsGeo_.Place,
      planId: Units_.Uuid,
      outwards: Itineraries,
      returns: Itineraries,
    }),
    t.type({
      from: t.unknown,
      planId: t.unknown,
      outwards: t.unknown,
      returns: t.unknown,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      from?: UnitsGeo_.Place;
      planId?: Units_.Uuid;
      outwards?: Itineraries;
      returns?: Itineraries;
    } & {
      from: unknown;
      planId: unknown;
      outwards: unknown;
      returns: unknown;
    },
    Plan1Brand
  > => true,
  'Plan1',
);
export interface Plan1Brand {
  readonly Plan1: unique symbol;
}
// Plan2
// The purpose of this remains a mystery
export type Plan2 = t.Branded<
  {
    from?: UnitsGeo_.Place;
    planId?: Units_.Uuid;
    itineraries?: Itineraries;
  } & {
    from: unknown;
    planId: unknown;
    itineraries: unknown;
  },
  Plan2Brand
>;
export const Plan2 = t.brand(
  t.intersection([
    t.partial({
      from: UnitsGeo_.Place,
      planId: Units_.Uuid,
      itineraries: Itineraries,
    }),
    t.type({
      from: t.unknown,
      planId: t.unknown,
      itineraries: t.unknown,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      from?: UnitsGeo_.Place;
      planId?: Units_.Uuid;
      itineraries?: Itineraries;
    } & {
      from: unknown;
      planId: unknown;
      itineraries: unknown;
    },
    Plan2Brand
  > => true,
  'Plan2',
);
export interface Plan2Brand {
  readonly Plan2: unique symbol;
}
// Default
// The default export. More information at the top.
export type Default = t.Branded<Plan1 | Plan2, DefaultBrand>;
export const Default = t.brand(
  t.union([Plan1, Plan2]),
  (x): x is t.Branded<Plan1 | Plan2, DefaultBrand> => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
