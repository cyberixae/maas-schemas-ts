/*

undefined
Partial (Points only) GeoJSON Schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as UnitsGeo_ from 'units-geo.json';

export const schemaId = 'http://maasglobal.com/core/components/geolocation.json';
// Geometry
// The purpose of this remains a mystery
export type Geometry = t.Branded<
  {
    type: 'Point';
    coordinates: UnitsGeo_.ShortLocation;
  },
  GeometryBrand
>;
export const Geometry = t.brand(
  t.type({
    type: t.union([t.literal('Point')]),
    coordinates: UnitsGeo_.ShortLocation,
  }),
  (
    x,
  ): x is t.Branded<
    {
      type: 'Point';
      coordinates: UnitsGeo_.ShortLocation;
    },
    GeometryBrand
  > => true,
  'Geometry',
);
export interface GeometryBrand {
  readonly Geometry: unique symbol;
}
// Properties
// The purpose of this remains a mystery
export type Properties = t.Branded<
  {
    name: string;
    streetNumber?: string;
    streetName?: string;
    city?: string;
    country?: string;
    countryCode?: string;
    houseNumber?: number;
    zipcode?: number;
  },
  PropertiesBrand
>;
export const Properties = t.brand(
  t.intersection([
    t.type({
      name: t.string,
    }),
    t.partial({
      streetNumber: t.string,
      streetName: t.string,
      city: t.string,
      country: t.string,
      countryCode: t.string,
      houseNumber: t.number,
      zipcode: t.number,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      name: string;
      streetNumber?: string;
      streetName?: string;
      city?: string;
      country?: string;
      countryCode?: string;
      houseNumber?: number;
      zipcode?: number;
    },
    PropertiesBrand
  > => true,
  'Properties',
);
export interface PropertiesBrand {
  readonly Properties: unique symbol;
}
// Feature
// The purpose of this remains a mystery
export type Feature = t.Branded<
  {
    type: 'Feature';
    geometry: Geometry;
    properties: Properties;
  },
  FeatureBrand
>;
export const Feature = t.brand(
  t.type({
    type: t.union([t.literal('Feature')]),
    geometry: Geometry,
    properties: Properties,
  }),
  (
    x,
  ): x is t.Branded<
    {
      type: 'Feature';
      geometry: Geometry;
      properties: Properties;
    },
    FeatureBrand
  > => true,
  'Feature',
);
export interface FeatureBrand {
  readonly Feature: unique symbol;
}
// FeatureCollection
// The purpose of this remains a mystery
export type FeatureCollection = t.Branded<
  {
    type: 'FeatureCollection';
    features: Array<Feature>;
  },
  FeatureCollectionBrand
>;
export const FeatureCollection = t.brand(
  t.type({
    type: t.union([t.literal('FeatureCollection')]),
    features: t.array(Feature),
  }),
  (
    x,
  ): x is t.Branded<
    {
      type: 'FeatureCollection';
      features: Array<Feature>;
    },
    FeatureCollectionBrand
  > => true,
  'FeatureCollection',
);
export interface FeatureCollectionBrand {
  readonly FeatureCollection: unique symbol;
}
// Default
// The purpose of this remains a mystery
export type Default = t.Branded<unknown, DefaultBrand>;
export const Default = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, DefaultBrand> => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
