/*

undefined
Partial (Points only) GeoJSON Schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as UnitsGeo_ from 'maas-schemas-ts/core/components/units-geo';

export const schemaId = 'http://maasglobal.com/core/components/geolocation.json';
// Geometry
// The purpose of this remains a mystery
export type Geometry = t.Branded<
  {
    type?: 'Point';
    coordinates?: UnitsGeo_.ShortLocation;
  } & {
    type: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
    coordinates:
      | Record<string, unknown>
      | Array<unknown>
      | string
      | boolean
      | number
      | null;
  },
  GeometryBrand
>;
export const Geometry = t.brand(
  t.intersection([
    t.partial({
      type: t.literal('Point'),
      coordinates: UnitsGeo_.ShortLocation,
    }),
    t.type({
      type: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
      coordinates: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      type?: 'Point';
      coordinates?: UnitsGeo_.ShortLocation;
    } & {
      type: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
      coordinates:
        | Record<string, unknown>
        | Array<unknown>
        | string
        | boolean
        | number
        | null;
    },
    GeometryBrand
  > => true,
  'Geometry',
);
export interface GeometryBrand {
  readonly Geometry: unique symbol;
}
// Properties
// The purpose of this remains a mystery
export type Properties = t.Branded<
  {
    name?: string;
    streetNumber?: string;
    streetName?: string;
    city?: string;
    country?: string;
    countryCode?: string;
    houseNumber?: number;
    zipcode?: number;
  } & {
    name: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
  },
  PropertiesBrand
>;
export const Properties = t.brand(
  t.intersection([
    t.partial({
      name: t.string,
      streetNumber: t.string,
      streetName: t.string,
      city: t.string,
      country: t.string,
      countryCode: t.string,
      houseNumber: t.number,
      zipcode: t.number,
    }),
    t.type({
      name: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      name?: string;
      streetNumber?: string;
      streetName?: string;
      city?: string;
      country?: string;
      countryCode?: string;
      houseNumber?: number;
      zipcode?: number;
    } & {
      name: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
    },
    PropertiesBrand
  > => true,
  'Properties',
);
export interface PropertiesBrand {
  readonly Properties: unique symbol;
}
// Feature
// The purpose of this remains a mystery
export type Feature = t.Branded<
  {
    type?: 'Feature';
    geometry?: Geometry;
    properties?: Properties;
  } & {
    type: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
    geometry: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
    properties:
      | Record<string, unknown>
      | Array<unknown>
      | string
      | boolean
      | number
      | null;
  },
  FeatureBrand
>;
export const Feature = t.brand(
  t.intersection([
    t.partial({
      type: t.literal('Feature'),
      geometry: Geometry,
      properties: Properties,
    }),
    t.type({
      type: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
      geometry: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
      properties: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      type?: 'Feature';
      geometry?: Geometry;
      properties?: Properties;
    } & {
      type: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
      geometry:
        | Record<string, unknown>
        | Array<unknown>
        | string
        | boolean
        | number
        | null;
      properties:
        | Record<string, unknown>
        | Array<unknown>
        | string
        | boolean
        | number
        | null;
    },
    FeatureBrand
  > => true,
  'Feature',
);
export interface FeatureBrand {
  readonly Feature: unique symbol;
}
// FeatureCollection
// The purpose of this remains a mystery
export type FeatureCollection = t.Branded<
  {
    type?: 'FeatureCollection';
    features?: Array<Feature>;
  } & {
    type: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
    features: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
  },
  FeatureCollectionBrand
>;
export const FeatureCollection = t.brand(
  t.intersection([
    t.partial({
      type: t.literal('FeatureCollection'),
      features: t.array(Feature),
    }),
    t.type({
      type: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
      features: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      type?: 'FeatureCollection';
      features?: Array<Feature>;
    } & {
      type: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
      features:
        | Record<string, unknown>
        | Array<unknown>
        | string
        | boolean
        | number
        | null;
    },
    FeatureCollectionBrand
  > => true,
  'FeatureCollection',
);
export interface FeatureCollectionBrand {
  readonly FeatureCollection: unique symbol;
}
// Default
// The default export. More information at the top.
export type Default = t.Branded<unknown, DefaultBrand>;
export const Default = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, DefaultBrand> => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
