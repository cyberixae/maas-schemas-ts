/*

undefined
MaaS booking terms and condition for its business engine

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Cost_ from 'maas-schemas-ts/core/components/cost';
import * as Fare_ from 'maas-schemas-ts/core/components/fare';
import * as Units_ from 'maas-schemas-ts/core/components/units';

export const schemaId = 'http://maasglobal.com/core/components/terms.json';
// Seat
// Ticket's seat information for long distance trains, coaches or flights
export type Seat = t.Branded<
  {
    route?: string;
    number?: string | number;
    coach?: string | number;
  },
  SeatBrand
>;
export const Seat = t.brand(
  t.partial({
    route: t.string,
    number: t.union([t.string, t.number]),
    coach: t.union([t.string, t.number]),
  }),
  (
    x,
  ): x is t.Branded<
    {
      route?: string;
      number?: string | number;
      coach?: string | number;
    },
    SeatBrand
  > => true,
  'Seat',
);
export interface SeatBrand {
  readonly Seat: unique symbol;
}
// Cancellation
// The purpose of this remains a mystery
export type Cancellation = t.Branded<
  {
    cancellable?: boolean;
    cost?: Cost_.Default;
    fare?: Fare_.Default;
    refunded?: boolean;
  } & {
    cancellable: {} | null;
    refunded: {} | null;
  },
  CancellationBrand
>;
export const Cancellation = t.brand(
  t.intersection([
    t.partial({
      cancellable: t.boolean,
      cost: Cost_.Default,
      fare: Fare_.Default,
      refunded: t.boolean,
    }),
    t.type({
      cancellable: t.union([t.type({}), t.null]),
      refunded: t.union([t.type({}), t.null]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      cancellable?: boolean;
      cost?: Cost_.Default;
      fare?: Fare_.Default;
      refunded?: boolean;
    } & {
      cancellable: {} | null;
      refunded: {} | null;
    },
    CancellationBrand
  > => true,
  'Cancellation',
);
export interface CancellationBrand {
  readonly Cancellation: unique symbol;
}
// Amendment
// The purpose of this remains a mystery
export type Amendment = t.Branded<
  {
    amendable?: boolean;
    cost?: Cost_.Default;
    fare?: Fare_.Default;
  } & {
    amendable: {} | null;
  },
  AmendmentBrand
>;
export const Amendment = t.brand(
  t.intersection([
    t.partial({
      amendable: t.boolean,
      cost: Cost_.Default,
      fare: Fare_.Default,
    }),
    t.type({
      amendable: t.union([t.type({}), t.null]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      amendable?: boolean;
      cost?: Cost_.Default;
      fare?: Fare_.Default;
    } & {
      amendable: {} | null;
    },
    AmendmentBrand
  > => true,
  'Amendment',
);
export interface AmendmentBrand {
  readonly Amendment: unique symbol;
}
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    type?: string;
    seatings?: Array<Seat>;
    validity?: {
      startTime?: Units_.Time;
      endTime?: Units_.Time;
      startTimeReturn?: Units_.Time;
      endTimeReturn?: Units_.Time;
    } & {
      startTime: {} | null;
      endTime: {} | null;
    };
    reusable?: boolean;
    reconcilable?: boolean;
    restrictions?: {
      singleDevice?: boolean;
      skipRestrictionCheck?: boolean;
      freeTicket?: {};
    };
    cancellation?: {
      cancellationFormActionUrl?: Units_.Url;
      outward?: Cancellation;
      return?: Cancellation;
    };
    amendment?: {
      outward?: Amendment;
      return?: Amendment;
    };
    fareRates?: Array<
      {
        amount?: number;
        currency?: Units_.Currency;
        timeInterval?: number;
        startAt?: number;
        type?: 'maxRate' | 'missedReturnPenalty' | 'extra';
      } & {
        amount: {} | null;
        currency: {} | null;
      }
    >;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.partial({
    type: t.string,
    seatings: t.array(Seat),
    validity: t.intersection([
      t.partial({
        startTime: Units_.Time,
        endTime: Units_.Time,
        startTimeReturn: Units_.Time,
        endTimeReturn: Units_.Time,
      }),
      t.type({
        startTime: t.union([t.type({}), t.null]),
        endTime: t.union([t.type({}), t.null]),
      }),
    ]),
    reusable: t.boolean,
    reconcilable: t.boolean,
    restrictions: t.partial({
      singleDevice: t.boolean,
      skipRestrictionCheck: t.boolean,
      freeTicket: t.type({}),
    }),
    cancellation: t.partial({
      cancellationFormActionUrl: Units_.Url,
      outward: Cancellation,
      return: Cancellation,
    }),
    amendment: t.partial({
      outward: Amendment,
      return: Amendment,
    }),
    fareRates: t.array(
      t.intersection([
        t.partial({
          amount: t.number,
          currency: Units_.Currency,
          timeInterval: t.number,
          startAt: t.number,
          type: t.union([
            t.literal('maxRate'),
            t.literal('missedReturnPenalty'),
            t.literal('extra'),
          ]),
        }),
        t.type({
          amount: t.union([t.type({}), t.null]),
          currency: t.union([t.type({}), t.null]),
        }),
      ]),
    ),
  }),
  (
    x,
  ): x is t.Branded<
    {
      type?: string;
      seatings?: Array<Seat>;
      validity?: {
        startTime?: Units_.Time;
        endTime?: Units_.Time;
        startTimeReturn?: Units_.Time;
        endTimeReturn?: Units_.Time;
      } & {
        startTime: {} | null;
        endTime: {} | null;
      };
      reusable?: boolean;
      reconcilable?: boolean;
      restrictions?: {
        singleDevice?: boolean;
        skipRestrictionCheck?: boolean;
        freeTicket?: {};
      };
      cancellation?: {
        cancellationFormActionUrl?: Units_.Url;
        outward?: Cancellation;
        return?: Cancellation;
      };
      amendment?: {
        outward?: Amendment;
        return?: Amendment;
      };
      fareRates?: Array<
        {
          amount?: number;
          currency?: Units_.Currency;
          timeInterval?: number;
          startAt?: number;
          type?: 'maxRate' | 'missedReturnPenalty' | 'extra';
        } & {
          amount: {} | null;
          currency: {} | null;
        }
      >;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
