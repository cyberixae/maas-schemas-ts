/*

undefined
Base schema for MODE_CAR* metas

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as ACRISS_ from 'maas-schemas-ts/core/components/ACRISS';
import * as UnitsGeo_ from 'maas-schemas-ts/core/components/units-geo';
import * as Common_ from 'maas-schemas-ts/core/components/common';

export const schemaId = 'http://maasglobal.com/core/components/car-rental.json';
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    id?: string;
    name?: string;
    description?: string;
    image?: Units_.Url;
    terms?: unknown;
    car?: {
      passengers?: number;
      doors?: Array<number>;
      luggage?: Array<number>;
      transmission?: 'manual' | 'automatic' | null;
      fuel?:
        | 'diesel'
        | 'electric'
        | 'ethanol'
        | 'gasoline'
        | 'hybrid'
        | 'hydrogen'
        | 'lpg'
        | 'multifuel'
        | null;
      classification?: ACRISS_.Default | null;
      registrationPlate?: string;
      damage?: string;
      fuelLevel?: number;
      location?: UnitsGeo_.Location;
    } & {
      classification: {} | null;
    };
    pickupInfo?: Common_.HtmlBlock;
    returnInfo?: Common_.HtmlBlock;
    startEndGeoRegionUrl?: Units_.Url;
  } & {
    name: {} | null;
    description: {} | null;
    image: {} | null;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
      name: t.string,
      description: t.string,
      image: Units_.Url,
      terms: t.unknown,
      car: t.intersection([
        t.partial({
          passengers: t.number,
          doors: t.array(t.number),
          luggage: t.array(t.number),
          transmission: t.union([t.literal('manual'), t.literal('automatic'), t.null]),
          fuel: t.union([
            t.literal('diesel'),
            t.literal('electric'),
            t.literal('ethanol'),
            t.literal('gasoline'),
            t.literal('hybrid'),
            t.literal('hydrogen'),
            t.literal('lpg'),
            t.literal('multifuel'),
            t.null,
          ]),
          classification: t.union([ACRISS_.Default, t.null]),
          registrationPlate: t.string,
          damage: t.string,
          fuelLevel: t.number,
          location: UnitsGeo_.Location,
        }),
        t.type({
          classification: t.union([t.type({}), t.null]),
        }),
      ]),
      pickupInfo: Common_.HtmlBlock,
      returnInfo: Common_.HtmlBlock,
      startEndGeoRegionUrl: Units_.Url,
    }),
    t.type({
      name: t.union([t.type({}), t.null]),
      description: t.union([t.type({}), t.null]),
      image: t.union([t.type({}), t.null]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      name?: string;
      description?: string;
      image?: Units_.Url;
      terms?: unknown;
      car?: {
        passengers?: number;
        doors?: Array<number>;
        luggage?: Array<number>;
        transmission?: 'manual' | 'automatic' | null;
        fuel?:
          | 'diesel'
          | 'electric'
          | 'ethanol'
          | 'gasoline'
          | 'hybrid'
          | 'hydrogen'
          | 'lpg'
          | 'multifuel'
          | null;
        classification?: ACRISS_.Default | null;
        registrationPlate?: string;
        damage?: string;
        fuelLevel?: number;
        location?: UnitsGeo_.Location;
      } & {
        classification: {} | null;
      };
      pickupInfo?: Common_.HtmlBlock;
      returnInfo?: Common_.HtmlBlock;
      startEndGeoRegionUrl?: Units_.Url;
    } & {
      name: {} | null;
      description: {} | null;
      image: {} | null;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
