/*

undefined
MaaS common units that are used consistently within our own objects

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';

export const schemaId = 'http://maasglobal.com/core/components/units.json';

// Universally unique identifier, see https://en.wikipedia.org/wiki/Universally_unique_identifier
export type Uuid = t.Branded<string, UuidBrand>;
export const Uuid = t.brand(
  t.string,
  (x): x is t.Branded<string, UuidBrand> =>
    typeof x !== 'string' ||
    x.match(/^[A-Fa-f0-9]{8}(-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}$/) !== null,
  'Uuid',
);
export interface UuidBrand {
  readonly Uuid: unique symbol;
}

// Uniform resource locator, see https://en.wikipedia.org/wiki/Uniform_Resource_Locator and https://mathiasbynens.be/demo/url-regex
export type Url = t.Branded<string, UrlBrand>;
export const Url = t.brand(
  t.string,
  (x): x is t.Branded<string, UrlBrand> =>
    typeof x !== 'string' || x.match(/^(https?|ftp):\/\/[^\s/$.?#].[^\s]*$/) !== null,
  'Url',
);
export interface UrlBrand {
  readonly Url: unique symbol;
}

export type Arn = t.Branded<string, ArnBrand>;
export const Arn = t.brand(
  t.string,
  (x): x is t.Branded<string, ArnBrand> =>
    (typeof x !== 'string' ||
      x.match(/^arn:aws:[a-z]+:[\w\-]*:\d{12}:[ \w\-]+(\/[\w\- \/]+)*/) !== null) &&
    (typeof x !== 'string' || x.length >= 1) &&
    (typeof x !== 'string' || x.length <= 256),
  'Arn',
);
export interface ArnBrand {
  readonly Arn: unique symbol;
}

export type IdentityId = t.Branded<string, IdentityIdBrand>;
export const IdentityId = t.brand(
  t.string,
  (x): x is t.Branded<string, IdentityIdBrand> =>
    typeof x !== 'string' ||
    x.match(/^[aepus]{2}-[\w]{4}-\d:[a-f\d]{8}(-[a-f\d]{4}){3}-[a-f\d]{12}$/) !== null,
  'IdentityId',
);
export interface IdentityIdBrand {
  readonly IdentityId: unique symbol;
}

// Accepted monetary unit in ISO 4127 format, see https://en.wikipedia.org/wiki/ISO_4217#cite_note-1
export type Currency = t.Branded<string, CurrencyBrand>;
export const Currency = t.brand(
  t.string,
  (x): x is t.Branded<string, CurrencyBrand> =>
    JSON.stringify(x) === JSON.stringify('EUR') ||
    JSON.stringify(x) === JSON.stringify('GBP') ||
    JSON.stringify(x) === JSON.stringify('SGD') ||
    JSON.stringify(x) === JSON.stringify('USD'),
  'Currency',
);
export interface CurrencyBrand {
  readonly Currency: unique symbol;
}

// POSIX time in milliseconds, https://en.wikipedia.org/wiki/Unix_time
export type Time = t.Branded<number, TimeBrand>;
export const Time = t.brand(
  t.number,
  (x): x is t.Branded<number, TimeBrand> =>
    (typeof x !== 'number' || x >= 1451606400) &&
    (typeof x !== 'string' || x <= 9007199254740991) &&
    Number.isInteger(x),
  'Time',
);
export interface TimeBrand {
  readonly Time: unique symbol;
}

// duration in milliseconds (negative values permitted), https://en.wikipedia.org/wiki/Unix_time
export type Duration = t.Branded<number, DurationBrand>;
export const Duration = t.brand(
  t.number,
  (x): x is t.Branded<number, DurationBrand> =>
    (typeof x !== 'number' || x >= -9007199254740991) &&
    (typeof x !== 'string' || x <= 9007199254740991) &&
    Number.isInteger(x),
  'Duration',
);
export interface DurationBrand {
  readonly Duration: unique symbol;
}

// A date in the form YYYY-MM-DD without a time component
export type IsoDate = t.Branded<string, IsoDateBrand>;
export const IsoDate = t.brand(
  t.string,
  (x): x is t.Branded<string, IsoDateBrand> =>
    typeof x !== 'string' || x.match(/^\d{4}-\d{2}-\d{2}/) !== null,
  'IsoDate',
);
export interface IsoDateBrand {
  readonly IsoDate: unique symbol;
}

// Success
