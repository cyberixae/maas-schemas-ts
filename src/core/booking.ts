/*

undefined
The base booking object with all fields, to be inherited

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as Units_ from './components/units';
import * as t from 'io-ts';
import * as Fare_ from './components/fare';
import * as Leg_ from './leg';
import * as Common_ from './components/common';
import * as MODE_WALK_ from 'src/core/modes/MODE_WALK';
import * as MODE_BICYCLE_ from 'src/core/modes/MODE_BICYCLE';
import * as MODE_TRAM_ from 'src/core/modes/MODE_TRAM';
import * as MODE_SUBWAY_ from 'src/core/modes/MODE_SUBWAY';
import * as MODE_RAIL_ from 'src/core/modes/MODE_RAIL';
import * as MODE_BUS_ from 'src/core/modes/MODE_BUS';
import * as MODE_FERRY_ from 'src/core/modes/MODE_FERRY';
import * as MODE_CABLE_CAR_ from 'src/core/modes/MODE_CABLE_CAR';
import * as MODE_GONDOLA_ from 'src/core/modes/MODE_GONDOLA';
import * as MODE_FUNICULAR_ from 'src/core/modes/MODE_FUNICULAR';
import * as MODE_SHARED_BICYCLE_ from 'src/core/modes/MODE_SHARED_BICYCLE';
import * as MODE_TRANSIT_ from 'src/core/modes/MODE_TRANSIT';
import * as MODE_TRAIN_ from 'src/core/modes/MODE_TRAIN';
import * as MODE_TRAINISH_ from 'src/core/modes/MODE_TRAINISH';
import * as MODE_BUSISH_ from 'src/core/modes/MODE_BUSISH';
import * as MODE_TAXI_ from 'src/core/modes/MODE_TAXI';
import * as MODE_SCOOTER_ from 'src/core/modes/MODE_SCOOTER';
import * as Terms_ from './components/terms';
import * as State_ from './components/state';
import * as StateLog_ from './components/state-log';
import * as Customer_ from 'src/core/customer';
import * as Product_ from './product';
import * as CustomerSelection_ from './components/customerSelection';

export const schemaId = 'http://maasglobal.com/core/booking.json#';
// Id
// The purpose of this remains a mystery
export type Id = Units_.Uuid;
export const Id = Units_.Uuid;
// Fares
// The purpose of this remains a mystery
export type Fares = t.Branded<Array<Fare_.Default>, FaresBrand>;
export const Fares = t.brand(
  t.array(Fare_.Default),
  (x): x is t.Branded<Array<Fare_.Default>, FaresBrand> => true,
  'Fares',
);
export interface FaresBrand {
  readonly Fares: unique symbol;
}
// TspId
// The purpose of this remains a mystery
export type TspId = t.Branded<string, TspIdBrand>;
export const TspId = t.brand(
  t.string,
  (x): x is t.Branded<string, TspIdBrand> =>
    (typeof x !== 'string' || x.length >= 1) &&
    (typeof x !== 'string' || x.length <= 256),
  'TspId',
);
export interface TspIdBrand {
  readonly TspId: unique symbol;
}
// Leg
// MaaS response may return any subset of legCore
export type Leg = t.Branded<
  Leg_.PartialLegCore & {
    signature?: Common_.Signature;
  },
  LegBrand
>;
export const Leg = t.brand(
  t.intersection([
    Leg_.PartialLegCore,
    t.partial({
      signature: Common_.Signature,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    Leg_.PartialLegCore & {
      signature?: Common_.Signature;
    },
    LegBrand
  > => true,
  'Leg',
);
export interface LegBrand {
  readonly Leg: unique symbol;
}
// Meta
// TSP/mode-specific additional information. The TSP adapter should set MODE_{mode} with defined data, otherwise 'meta' can be used freely.
export type Meta = t.Branded<
  {
    MODE_WALK?: MODE_WALK_.Default;
    MODE_BICYCLE?: MODE_BICYCLE_.Default;
    MODE_TRAM?: MODE_TRAM_.Default;
    MODE_SUBWAY?: MODE_SUBWAY_.Default;
    MODE_RAIL?: MODE_RAIL_.Default;
    MODE_BUS?: MODE_BUS_.Default;
    MODE_FERRY?: MODE_FERRY_.Default;
    MODE_CABLE_CAR?: MODE_CABLE_CAR_.Default;
    MODE_GONDOLA?: MODE_GONDOLA_.Default;
    MODE_FUNICULAR?: MODE_FUNICULAR_.Default;
    MODE_SHARED_BICYCLE?: MODE_SHARED_BICYCLE_.Default;
    MODE_TRANSIT?: MODE_TRANSIT_.Default;
    MODE_TRAIN?: MODE_TRAIN_.Default;
    MODE_TRAINISH?: MODE_TRAINISH_.Default;
    MODE_BUSISH?: MODE_BUSISH_.Default;
    MODE_TAXI?: MODE_TAXI_.Default;
    MODE_SCOOTER?: MODE_SCOOTER_.Default;
  },
  MetaBrand
>;
export const Meta = t.brand(
  t.partial({
    MODE_WALK: MODE_WALK_.Default,
    MODE_BICYCLE: MODE_BICYCLE_.Default,
    MODE_TRAM: MODE_TRAM_.Default,
    MODE_SUBWAY: MODE_SUBWAY_.Default,
    MODE_RAIL: MODE_RAIL_.Default,
    MODE_BUS: MODE_BUS_.Default,
    MODE_FERRY: MODE_FERRY_.Default,
    MODE_CABLE_CAR: MODE_CABLE_CAR_.Default,
    MODE_GONDOLA: MODE_GONDOLA_.Default,
    MODE_FUNICULAR: MODE_FUNICULAR_.Default,
    MODE_SHARED_BICYCLE: MODE_SHARED_BICYCLE_.Default,
    MODE_TRANSIT: MODE_TRANSIT_.Default,
    MODE_TRAIN: MODE_TRAIN_.Default,
    MODE_TRAINISH: MODE_TRAINISH_.Default,
    MODE_BUSISH: MODE_BUSISH_.Default,
    MODE_TAXI: MODE_TAXI_.Default,
    MODE_SCOOTER: MODE_SCOOTER_.Default,
  }),
  (
    x,
  ): x is t.Branded<
    {
      MODE_WALK?: MODE_WALK_.Default;
      MODE_BICYCLE?: MODE_BICYCLE_.Default;
      MODE_TRAM?: MODE_TRAM_.Default;
      MODE_SUBWAY?: MODE_SUBWAY_.Default;
      MODE_RAIL?: MODE_RAIL_.Default;
      MODE_BUS?: MODE_BUS_.Default;
      MODE_FERRY?: MODE_FERRY_.Default;
      MODE_CABLE_CAR?: MODE_CABLE_CAR_.Default;
      MODE_GONDOLA?: MODE_GONDOLA_.Default;
      MODE_FUNICULAR?: MODE_FUNICULAR_.Default;
      MODE_SHARED_BICYCLE?: MODE_SHARED_BICYCLE_.Default;
      MODE_TRANSIT?: MODE_TRANSIT_.Default;
      MODE_TRAIN?: MODE_TRAIN_.Default;
      MODE_TRAINISH?: MODE_TRAINISH_.Default;
      MODE_BUSISH?: MODE_BUSISH_.Default;
      MODE_TAXI?: MODE_TAXI_.Default;
      MODE_SCOOTER?: MODE_SCOOTER_.Default;
    },
    MetaBrand
  > => true,
  'Meta',
);
export interface MetaBrand {
  readonly Meta: unique symbol;
}
// Terms
// The purpose of this remains a mystery
export type Terms = Terms_.Default;
export const Terms = Terms_.Default;
// Token
// The validity token (such as booking ID, travel ticket etc.) that MaaS clients will display to validate the trip when starting the leg.
export type Token = t.Branded<
  {
    validityDuration?: {
      startTime?: Units_.Time;
      endTime?: Units_.Time;
    };
    data?: {};
    meta?: {};
  },
  TokenBrand
>;
export const Token = t.brand(
  t.partial({
    validityDuration: t.partial({
      startTime: Units_.Time,
      endTime: Units_.Time,
    }),
    data: t.type({}),
    meta: t.type({}),
  }),
  (
    x,
  ): x is t.Branded<
    {
      validityDuration?: {
        startTime?: Units_.Time;
        endTime?: Units_.Time;
      };
      data?: {};
      meta?: {};
    },
    TokenBrand
  > => true,
  'Token',
);
export interface TokenBrand {
  readonly Token: unique symbol;
}
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    id: Id;
    tspId?: TspId;
    state: State_.BookingState;
    stateLog?: StateLog_.Default;
    fares?: Fares;
    leg: Leg;
    token: Token;
    meta: Meta;
    terms: Terms;
    customer: Customer_.Default & unknown;
    product?: Product_.Default;
    signature?: Common_.Signature;
    customerSelection?: CustomerSelection_.Default;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.type({
      id: Id,
      state: State_.BookingState,
      leg: Leg,
      token: Token,
      meta: Meta,
      terms: Terms,
      customer: t.intersection([Customer_.Default, t.unknown]),
    }),
    t.partial({
      tspId: TspId,
      stateLog: StateLog_.Default,
      fares: Fares,
      product: Product_.Default,
      signature: Common_.Signature,
      customerSelection: CustomerSelection_.Default,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id: Id;
      tspId?: TspId;
      state: State_.BookingState;
      stateLog?: StateLog_.Default;
      fares?: Fares;
      leg: Leg;
      token: Token;
      meta: Meta;
      terms: Terms;
      customer: Customer_.Default & unknown;
      product?: Product_.Default;
      signature?: Common_.Signature;
      customerSelection?: CustomerSelection_.Default;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
