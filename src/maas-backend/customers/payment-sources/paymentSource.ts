/*

MaaS payment source schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';

export const schemaId = 'http://maasglobal.com/maas-backend/customers/payment-sources/paymentSource.json';

export type PaymentSourceId = t.Branded<string, PaymentSourceIdBrand>
export const PaymentSourceId = t.brand(t.string, (x): x is t.Branded<string, PaymentSourceIdBrand> => x === x && (x.length >= 2), 'PaymentSourceId')
interface PaymentSourceIdBrand {
  readonly PaymentSourceId: unique symbol
}

export type GatewayName = t.Branded<string, GatewayNameBrand>
export const GatewayName = t.brand(t.string, (x): x is t.Branded<string, GatewayNameBrand> => x === x && (x.length >= 3) && (x.length <= 255), 'GatewayName')
interface GatewayNameBrand {
  readonly GatewayName: unique symbol
}

export type Type = t.Branded<string, TypeBrand>
export const Type = t.brand(t.string, (x): x is t.Branded<string, TypeBrand> => x === x && (x.length >= 3) && (x.length <= 100), 'Type')
interface TypeBrand {
  readonly Type: unique symbol
}

export type Alias = t.Branded<string, AliasBrand>
export const Alias = t.brand(t.string, (x): x is t.Branded<string, AliasBrand> => x === x && (x.length >= 3) && (x.length <= 100), 'Alias')
interface AliasBrand {
  readonly Alias: unique symbol
}

export type Status = t.Branded<string, StatusBrand>
export const Status = t.brand(t.string, (x): x is t.Branded<string, StatusBrand> => x === x && (x.length >= 2) && (x.length <= 255), 'Status')
interface StatusBrand {
  readonly Status: unique symbol
}

export type SetupIntentId = t.Branded<string, SetupIntentIdBrand>
export const SetupIntentId = t.brand(t.string, (x): x is t.Branded<string, SetupIntentIdBrand> => x === x && (x.length >= 2) && (x.length <= 255), 'SetupIntentId')
interface SetupIntentIdBrand {
  readonly SetupIntentId: unique symbol
}

// Payment source
