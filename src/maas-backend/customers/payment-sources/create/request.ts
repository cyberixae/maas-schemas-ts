/*

undefined
MaaS customer payment sources create

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as PaymentSource_ from 'maas-schemas-ts/maas-backend/customers/payment-sources/paymentSource';
import * as ApiCommon_ from 'maas-schemas-ts/core/components/api-common';

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/payment-sources/create/request.json';
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    identityId?: Units_.IdentityId;
    customerId?: Units_.IdentityId;
    payload?: {
      paymentSource?: {
        gatewayName?: PaymentSource_.GatewayName;
        type?: PaymentSource_.Type;
        temporaryToken?: string;
        isDefault?: boolean;
        alias?: PaymentSource_.Alias;
      } & {
        type: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
        gatewayName:
          | Record<string, unknown>
          | Array<unknown>
          | string
          | boolean
          | number
          | null;
        temporaryToken:
          | Record<string, unknown>
          | Array<unknown>
          | string
          | boolean
          | number
          | null;
        isDefault:
          | Record<string, unknown>
          | Array<unknown>
          | string
          | boolean
          | number
          | null;
      };
    } & {
      paymentSource:
        | Record<string, unknown>
        | Array<unknown>
        | string
        | boolean
        | number
        | null;
    };
    headers?: ApiCommon_.Headers;
  } & {
    identityId:
      | Record<string, unknown>
      | Array<unknown>
      | string
      | boolean
      | number
      | null;
    customerId:
      | Record<string, unknown>
      | Array<unknown>
      | string
      | boolean
      | number
      | null;
    payload: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
    headers: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_.IdentityId,
      customerId: Units_.IdentityId,
      payload: t.intersection([
        t.partial({
          paymentSource: t.intersection([
            t.partial({
              gatewayName: PaymentSource_.GatewayName,
              type: PaymentSource_.Type,
              temporaryToken: t.string,
              isDefault: t.boolean,
              alias: PaymentSource_.Alias,
            }),
            t.type({
              type: t.union([
                t.UnknownRecord,
                t.UnknownArray,
                t.string,
                t.boolean,
                t.number,
                t.null,
              ]),
              gatewayName: t.union([
                t.UnknownRecord,
                t.UnknownArray,
                t.string,
                t.boolean,
                t.number,
                t.null,
              ]),
              temporaryToken: t.union([
                t.UnknownRecord,
                t.UnknownArray,
                t.string,
                t.boolean,
                t.number,
                t.null,
              ]),
              isDefault: t.union([
                t.UnknownRecord,
                t.UnknownArray,
                t.string,
                t.boolean,
                t.number,
                t.null,
              ]),
            }),
          ]),
        }),
        t.type({
          paymentSource: t.union([
            t.UnknownRecord,
            t.UnknownArray,
            t.string,
            t.boolean,
            t.number,
            t.null,
          ]),
        }),
      ]),
      headers: ApiCommon_.Headers,
    }),
    t.type({
      identityId: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
      customerId: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
      payload: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
      headers: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      customerId?: Units_.IdentityId;
      payload?: {
        paymentSource?: {
          gatewayName?: PaymentSource_.GatewayName;
          type?: PaymentSource_.Type;
          temporaryToken?: string;
          isDefault?: boolean;
          alias?: PaymentSource_.Alias;
        } & {
          type:
            | Record<string, unknown>
            | Array<unknown>
            | string
            | boolean
            | number
            | null;
          gatewayName:
            | Record<string, unknown>
            | Array<unknown>
            | string
            | boolean
            | number
            | null;
          temporaryToken:
            | Record<string, unknown>
            | Array<unknown>
            | string
            | boolean
            | number
            | null;
          isDefault:
            | Record<string, unknown>
            | Array<unknown>
            | string
            | boolean
            | number
            | null;
        };
      } & {
        paymentSource:
          | Record<string, unknown>
          | Array<unknown>
          | string
          | boolean
          | number
          | null;
      };
      headers?: ApiCommon_.Headers;
    } & {
      identityId:
        | Record<string, unknown>
        | Array<unknown>
        | string
        | boolean
        | number
        | null;
      customerId:
        | Record<string, unknown>
        | Array<unknown>
        | string
        | boolean
        | number
        | null;
      payload:
        | Record<string, unknown>
        | Array<unknown>
        | string
        | boolean
        | number
        | null;
      headers:
        | Record<string, unknown>
        | Array<unknown>
        | string
        | boolean
        | number
        | null;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
