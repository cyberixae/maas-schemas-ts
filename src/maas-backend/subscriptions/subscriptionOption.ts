/*

undefined
MaaS subscription option schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Common_ from 'src/core/components/common';
import * as Subscription_ from 'src/maas-backend/subscriptions/subscription';

export const schemaId =
  'http://maasglobal.com/maas-backend/subscriptions/subscriptionOption.json';
// SubscriptionAdditions
// The purpose of this remains a mystery
export type SubscriptionAdditions = t.Branded<
  {
    discounts?: Array<unknown>;
    requiredAuthorizations?: Array<Common_.AgencyId>;
  } & {
    plan: unknown;
    wmpGrant: unknown;
    pointCost: unknown;
    addons: unknown;
    coupons: unknown;
    requiredAuthorizations: unknown;
  },
  SubscriptionAdditionsBrand
>;
export const SubscriptionAdditions = t.brand(
  t.intersection([
    t.partial({
      discounts: t.UnknownArray,
      requiredAuthorizations: t.array(Common_.AgencyId),
    }),
    t.type({
      plan: t.unknown,
      wmpGrant: t.unknown,
      pointCost: t.unknown,
      addons: t.unknown,
      coupons: t.unknown,
      requiredAuthorizations: t.unknown,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      discounts?: Array<unknown>;
      requiredAuthorizations?: Array<Common_.AgencyId>;
    } & {
      plan: unknown;
      wmpGrant: unknown;
      pointCost: unknown;
      addons: unknown;
      coupons: unknown;
      requiredAuthorizations: unknown;
    },
    SubscriptionAdditionsBrand
  > => true,
  'SubscriptionAdditions',
);
export interface SubscriptionAdditionsBrand {
  readonly SubscriptionAdditions: unique symbol;
}
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  Subscription_.SubscriptionBase & SubscriptionAdditions,
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([Subscription_.SubscriptionBase, SubscriptionAdditions]),
  (
    x,
  ): x is t.Branded<
    Subscription_.SubscriptionBase & SubscriptionAdditions,
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
