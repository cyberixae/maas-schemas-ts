/*

undefined
MaaS pricing schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Subscription_ from './subscription';
import * as Cost_ from 'src/core/components/cost';
import * as Units_ from 'src/core/components/units';

export const schemaId = 'http://maasglobal.com/maas-backend/subscriptions/pricing.json';
// LineItem
// An item that is priced with it summaries
export type LineItem = t.Branded<
  {
    id: Subscription_.SubscriptionItemId;
    type: string;
    description: string;
    quantity: number;
    unitPrice: Cost_.Default;
  },
  LineItemBrand
>;
export const LineItem = t.brand(
  t.type({
    id: Subscription_.SubscriptionItemId,
    type: t.string,
    description: t.string,
    quantity: t.number,
    unitPrice: Cost_.Default,
  }),
  (
    x,
  ): x is t.Branded<
    {
      id: Subscription_.SubscriptionItemId;
      type: string;
      description: string;
      quantity: number;
      unitPrice: Cost_.Default;
    },
    LineItemBrand
  > => true,
  'LineItem',
);
export interface LineItemBrand {
  readonly LineItem: unique symbol;
}
// Discount
// A discount from coupon or such
export type Discount = t.Branded<
  {
    description: string;
    discount: Cost_.Default;
  },
  DiscountBrand
>;
export const Discount = t.brand(
  t.type({
    description: t.string,
    discount: Cost_.Default,
  }),
  (
    x,
  ): x is t.Branded<
    {
      description: string;
      discount: Cost_.Default;
    },
    DiscountBrand
  > => true,
  'Discount',
);
export interface DiscountBrand {
  readonly Discount: unique symbol;
}
// Terms
// Terms related to this subscription
export type Terms = t.Branded<
  {
    validity: {
      startTime: Units_.Time;
      endTime: Units_.Time;
    };
  },
  TermsBrand
>;
export const Terms = t.brand(
  t.type({
    validity: t.type({
      startTime: Units_.Time,
      endTime: Units_.Time,
    }),
  }),
  (
    x,
  ): x is t.Branded<
    {
      validity: {
        startTime: Units_.Time;
        endTime: Units_.Time;
      };
    },
    TermsBrand
  > => true,
  'Terms',
);
export interface TermsBrand {
  readonly Terms: unique symbol;
}
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    lineItems: Array<LineItem>;
    discounts?: Array<Discount>;
    total: Cost_.Default;
    terms?: Terms;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.type({
      lineItems: t.array(LineItem),
      total: Cost_.Default,
    }),
    t.partial({
      discounts: t.array(Discount),
      terms: Terms,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      lineItems: Array<LineItem>;
      discounts?: Array<Discount>;
      total: Cost_.Default;
      terms?: Terms;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
