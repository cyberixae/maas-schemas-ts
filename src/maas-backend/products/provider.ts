/*

undefined
MaaS product provider schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Common_ from 'maas-schemas-ts/core/components/common';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as PersonalDataAllowItem_ from 'maas-schemas-ts/core/components/personalDataAllowItem';

export const schemaId = 'http://maasglobal.com/maas-backend/products/provider.json';
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    name?: string;
    agencyId?: Common_.AgencyId;
    groupId?: string;
    hidden?: boolean;
    branding?: {
      primaryColor?: string;
      secondaryColor?: string;
      icon?: Units_.Url;
      logoSolidColor?: Units_.Url;
      logoFullColor?: Units_.Url;
    };
    features?: {
      ticket?: boolean;
      stationsList?: boolean;
      stationsRetrieve?: boolean;
    } & {
      ticket: unknown;
      stationsList: unknown;
      stationsRetrieve: unknown;
    };
    extra?: {
      radius?: {
        fixedFareAmount?: number;
        fixedFareCurrency?: Units_.Currency | (string & ('WMP' | 'TOKEN'));
        maxRadiusMetres?: number;
        description?: string;
      } & {
        fixedFareAmount: unknown;
        fixedFareCurrency: unknown;
        maxRadiusMetres: unknown;
      };
      prebookingSupported?: boolean;
    };
    personalDataOptionsAllow?: Array<PersonalDataAllowItem_.Default>;
    personalDataCreateAllow?: Array<PersonalDataAllowItem_.Default>;
    optionalParameters?: Array<
      {
        id?: string;
        name?: string;
        type?: 'oneOf' | 'someOf' | 'allOf' | 'oneOrNoneOf' | 'someOrNoneOf';
        userSelectable?: boolean;
        inputs?: Array<
          {
            id?: string;
            name?: string;
            type?: 'string' | 'number' | 'boolean' | 'station';
            default?: string | number | boolean;
          } & {
            id: unknown;
            name: unknown;
            type: unknown;
          }
        >;
      } & {
        id: unknown;
        name: unknown;
        inputs: unknown;
      }
    >;
  } & {
    name: unknown;
    agencyId: unknown;
    groupId: unknown;
    branding: unknown;
    hidden: unknown;
    features: unknown;
    personalDataOptionsAllow: unknown;
    personalDataCreateAllow: unknown;
    optionalParameters: unknown;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.partial({
      name: t.string,
      agencyId: Common_.AgencyId,
      groupId: t.string,
      hidden: t.boolean,
      branding: t.partial({
        primaryColor: t.string,
        secondaryColor: t.string,
        icon: Units_.Url,
        logoSolidColor: Units_.Url,
        logoFullColor: Units_.Url,
      }),
      features: t.intersection([
        t.partial({
          ticket: t.boolean,
          stationsList: t.boolean,
          stationsRetrieve: t.boolean,
        }),
        t.type({
          ticket: t.unknown,
          stationsList: t.unknown,
          stationsRetrieve: t.unknown,
        }),
      ]),
      extra: t.partial({
        radius: t.intersection([
          t.partial({
            fixedFareAmount: t.number,
            fixedFareCurrency: t.union([
              Units_.Currency,
              t.intersection([t.string, t.union([t.literal('WMP'), t.literal('TOKEN')])]),
            ]),
            maxRadiusMetres: t.number,
            description: t.string,
          }),
          t.type({
            fixedFareAmount: t.unknown,
            fixedFareCurrency: t.unknown,
            maxRadiusMetres: t.unknown,
          }),
        ]),
        prebookingSupported: t.boolean,
      }),
      personalDataOptionsAllow: t.array(PersonalDataAllowItem_.Default),
      personalDataCreateAllow: t.array(PersonalDataAllowItem_.Default),
      optionalParameters: t.array(
        t.intersection([
          t.partial({
            id: t.string,
            name: t.string,
            type: t.union([
              t.literal('oneOf'),
              t.literal('someOf'),
              t.literal('allOf'),
              t.literal('oneOrNoneOf'),
              t.literal('someOrNoneOf'),
            ]),
            userSelectable: t.boolean,
            inputs: t.array(
              t.intersection([
                t.partial({
                  id: t.string,
                  name: t.string,
                  type: t.union([
                    t.literal('string'),
                    t.literal('number'),
                    t.literal('boolean'),
                    t.literal('station'),
                  ]),
                  default: t.union([t.string, t.number, t.boolean]),
                }),
                t.type({
                  id: t.unknown,
                  name: t.unknown,
                  type: t.unknown,
                }),
              ]),
            ),
          }),
          t.type({
            id: t.unknown,
            name: t.unknown,
            inputs: t.unknown,
          }),
        ]),
      ),
    }),
    t.type({
      name: t.unknown,
      agencyId: t.unknown,
      groupId: t.unknown,
      branding: t.unknown,
      hidden: t.unknown,
      features: t.unknown,
      personalDataOptionsAllow: t.unknown,
      personalDataCreateAllow: t.unknown,
      optionalParameters: t.unknown,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      name?: string;
      agencyId?: Common_.AgencyId;
      groupId?: string;
      hidden?: boolean;
      branding?: {
        primaryColor?: string;
        secondaryColor?: string;
        icon?: Units_.Url;
        logoSolidColor?: Units_.Url;
        logoFullColor?: Units_.Url;
      };
      features?: {
        ticket?: boolean;
        stationsList?: boolean;
        stationsRetrieve?: boolean;
      } & {
        ticket: unknown;
        stationsList: unknown;
        stationsRetrieve: unknown;
      };
      extra?: {
        radius?: {
          fixedFareAmount?: number;
          fixedFareCurrency?: Units_.Currency | (string & ('WMP' | 'TOKEN'));
          maxRadiusMetres?: number;
          description?: string;
        } & {
          fixedFareAmount: unknown;
          fixedFareCurrency: unknown;
          maxRadiusMetres: unknown;
        };
        prebookingSupported?: boolean;
      };
      personalDataOptionsAllow?: Array<PersonalDataAllowItem_.Default>;
      personalDataCreateAllow?: Array<PersonalDataAllowItem_.Default>;
      optionalParameters?: Array<
        {
          id?: string;
          name?: string;
          type?: 'oneOf' | 'someOf' | 'allOf' | 'oneOrNoneOf' | 'someOrNoneOf';
          userSelectable?: boolean;
          inputs?: Array<
            {
              id?: string;
              name?: string;
              type?: 'string' | 'number' | 'boolean' | 'station';
              default?: string | number | boolean;
            } & {
              id: unknown;
              name: unknown;
              type: unknown;
            }
          >;
        } & {
          id: unknown;
          name: unknown;
          inputs: unknown;
        }
      >;
    } & {
      name: unknown;
      agencyId: unknown;
      groupId: unknown;
      branding: unknown;
      hidden: unknown;
      features: unknown;
      personalDataOptionsAllow: unknown;
      personalDataCreateAllow: unknown;
      optionalParameters: unknown;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
