/*

undefined
MaaS.fi geocoding (GeoJSON) response schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Geolocation_ from 'maas-schemas-ts/core/components/geolocation';

export const schemaId =
  'http://maasglobal.com/maas-backend/geocoding/geocoding-reverse/response.json';
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    type?: 'FeatureCollection';
    features?: Array<
      Geolocation_.Feature & {
        properties?: {} & {
          city:
            | Record<string, unknown>
            | Array<unknown>
            | string
            | boolean
            | number
            | null;
          country:
            | Record<string, unknown>
            | Array<unknown>
            | string
            | boolean
            | number
            | null;
          countryCode:
            | Record<string, unknown>
            | Array<unknown>
            | string
            | boolean
            | number
            | null;
        };
      }
    >;
    debug?: {};
  } & {
    type: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
    features: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.partial({
      type: t.literal('FeatureCollection'),
      features: t.array(
        t.intersection([
          Geolocation_.Feature,
          t.partial({
            properties: t.intersection([
              t.type({}),
              t.type({
                city: t.union([
                  t.UnknownRecord,
                  t.UnknownArray,
                  t.string,
                  t.boolean,
                  t.number,
                  t.null,
                ]),
                country: t.union([
                  t.UnknownRecord,
                  t.UnknownArray,
                  t.string,
                  t.boolean,
                  t.number,
                  t.null,
                ]),
                countryCode: t.union([
                  t.UnknownRecord,
                  t.UnknownArray,
                  t.string,
                  t.boolean,
                  t.number,
                  t.null,
                ]),
              }),
            ]),
          }),
        ]),
      ),
      debug: t.type({}),
    }),
    t.type({
      type: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
      features: t.union([
        t.UnknownRecord,
        t.UnknownArray,
        t.string,
        t.boolean,
        t.number,
        t.null,
      ]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      type?: 'FeatureCollection';
      features?: Array<
        Geolocation_.Feature & {
          properties?: {} & {
            city:
              | Record<string, unknown>
              | Array<unknown>
              | string
              | boolean
              | number
              | null;
            country:
              | Record<string, unknown>
              | Array<unknown>
              | string
              | boolean
              | number
              | null;
            countryCode:
              | Record<string, unknown>
              | Array<unknown>
              | string
              | boolean
              | number
              | null;
          };
        }
      >;
      debug?: {};
    } & {
      type: Record<string, unknown> | Array<unknown> | string | boolean | number | null;
      features:
        | Record<string, unknown>
        | Array<unknown>
        | string
        | boolean
        | number
        | null;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
