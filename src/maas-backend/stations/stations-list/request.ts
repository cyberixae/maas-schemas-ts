/*

undefined
Request schema for stations list

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as Common_ from 'maas-schemas-ts/core/components/common';
import * as UnitsGeo_ from 'maas-schemas-ts/core/components/units-geo';
import * as ApiCommon_ from 'maas-schemas-ts/core/components/api-common';

export const schemaId =
  'http://maasglobal.com/maas-backend/stations/stations-list/request.json';
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    identityId?: Units_.IdentityId;
    payload?:
      | ({
          agencyId?: Common_.AgencyId;
          lat?: UnitsGeo_.RelaxedLatitude;
          lon?: UnitsGeo_.RelaxedLatitude;
          radius?: number;
          type?: 'origin' | 'destination' | 'viaAvoid';
        } & {
          agencyId: {} | null;
          lat: {} | null;
          lon: {} | null;
          type: {} | null;
        })
      | ({
          agencyId?: Common_.AgencyId;
          name?: string;
          count?: number;
          type?: 'origin' | 'destination' | 'viaAvoid';
        } & {
          agencyId: {} | null;
          name: {} | null;
          count: {} | null;
          type: {} | null;
        });
    headers?: ApiCommon_.Headers;
  } & {
    identityId: {} | null;
    payload: {} | null;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_.IdentityId,
      payload: t.union([
        t.intersection([
          t.partial({
            agencyId: Common_.AgencyId,
            lat: UnitsGeo_.RelaxedLatitude,
            lon: UnitsGeo_.RelaxedLatitude,
            radius: t.number,
            type: t.union([
              t.literal('origin'),
              t.literal('destination'),
              t.literal('viaAvoid'),
            ]),
          }),
          t.type({
            agencyId: t.union([t.type({}), t.null]),
            lat: t.union([t.type({}), t.null]),
            lon: t.union([t.type({}), t.null]),
            type: t.union([t.type({}), t.null]),
          }),
        ]),
        t.intersection([
          t.partial({
            agencyId: Common_.AgencyId,
            name: t.string,
            count: t.number,
            type: t.union([
              t.literal('origin'),
              t.literal('destination'),
              t.literal('viaAvoid'),
            ]),
          }),
          t.type({
            agencyId: t.union([t.type({}), t.null]),
            name: t.union([t.type({}), t.null]),
            count: t.union([t.type({}), t.null]),
            type: t.union([t.type({}), t.null]),
          }),
        ]),
      ]),
      headers: ApiCommon_.Headers,
    }),
    t.type({
      identityId: t.union([t.type({}), t.null]),
      payload: t.union([t.type({}), t.null]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      payload?:
        | ({
            agencyId?: Common_.AgencyId;
            lat?: UnitsGeo_.RelaxedLatitude;
            lon?: UnitsGeo_.RelaxedLatitude;
            radius?: number;
            type?: 'origin' | 'destination' | 'viaAvoid';
          } & {
            agencyId: {} | null;
            lat: {} | null;
            lon: {} | null;
            type: {} | null;
          })
        | ({
            agencyId?: Common_.AgencyId;
            name?: string;
            count?: number;
            type?: 'origin' | 'destination' | 'viaAvoid';
          } & {
            agencyId: {} | null;
            name: {} | null;
            count: {} | null;
            type: {} | null;
          });
      headers?: ApiCommon_.Headers;
    } & {
      identityId: {} | null;
      payload: {} | null;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
