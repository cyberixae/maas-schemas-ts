/*

undefined
Request schema for bookings-agency-options

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as TravelMode_ from 'src/core/components/travel-mode';
import * as Common_ from 'src/core/components/common';
import * as Units_ from 'src/core/components/units';
import * as UnitsGeo_ from 'src/core/components/units-geo';
import * as Address_ from 'src/core/components/address';
import * as ApiCommon_ from 'src/core/components/api-common';

export const schemaId =
  'http://maasglobal.com/maas-backend/bookings/bookings-agency-options/request.json';
// Payload
// The purpose of this remains a mystery
export type Payload = t.Branded<
  {
    mode?: TravelMode_.Default;
    agencyId?: Common_.AgencyId;
    startTime?: Units_.Time;
    endTime?: Units_.Time;
    from?: UnitsGeo_.ShortLocationString;
    to?: UnitsGeo_.ShortLocationString;
    fromName?: Address_.PlaceName;
    fromAddress?: Address_.ComponentAddress;
    fromRadius?: UnitsGeo_.Distance;
    toName?: Address_.PlaceName;
    toAddress?: Address_.ComponentAddress;
    toRadius?: UnitsGeo_.Distance;
    bookingIdToExtend?: Units_.Uuid;
  } & Record<string, string | number | boolean>,
  PayloadBrand
>;
export const Payload = t.brand(
  t.intersection([
    t.partial({
      mode: TravelMode_.Default,
      agencyId: Common_.AgencyId,
      startTime: Units_.Time,
      endTime: Units_.Time,
      from: UnitsGeo_.ShortLocationString,
      to: UnitsGeo_.ShortLocationString,
      fromName: Address_.PlaceName,
      fromAddress: Address_.ComponentAddress,
      fromRadius: UnitsGeo_.Distance,
      toName: Address_.PlaceName,
      toAddress: Address_.ComponentAddress,
      toRadius: UnitsGeo_.Distance,
      bookingIdToExtend: Units_.Uuid,
    }),
    t.record(t.string, t.union([t.string, t.number, t.boolean])),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      mode?: TravelMode_.Default;
      agencyId?: Common_.AgencyId;
      startTime?: Units_.Time;
      endTime?: Units_.Time;
      from?: UnitsGeo_.ShortLocationString;
      to?: UnitsGeo_.ShortLocationString;
      fromName?: Address_.PlaceName;
      fromAddress?: Address_.ComponentAddress;
      fromRadius?: UnitsGeo_.Distance;
      toName?: Address_.PlaceName;
      toAddress?: Address_.ComponentAddress;
      toRadius?: UnitsGeo_.Distance;
      bookingIdToExtend?: Units_.Uuid;
    } & Record<string, string | number | boolean>,
    PayloadBrand
  > => true,
  'Payload',
);
export interface PayloadBrand {
  readonly Payload: unique symbol;
}
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    identityId?: Units_.IdentityId;
    payload?: Payload;
    headers?: ApiCommon_.Headers;
  } & {
    identityId: unknown;
    payload: unknown;
    headers: unknown;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_.IdentityId,
      payload: Payload,
      headers: ApiCommon_.Headers,
    }),
    t.type({
      identityId: t.unknown,
      payload: t.unknown,
      headers: t.unknown,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      payload?: Payload;
      headers?: ApiCommon_.Headers;
    } & {
      identityId: unknown;
      payload: unknown;
      headers: unknown;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
