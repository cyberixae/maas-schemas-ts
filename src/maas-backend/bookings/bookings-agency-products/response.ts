/*

undefined
Response schema for bookings-agency-products

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as Fare_ from 'maas-schemas-ts/core/components/fare';
import * as Common_ from 'maas-schemas-ts/core/components/common';

export const schemaId =
  'http://maasglobal.com/maas-backend/bookings/bookings-agency-products/response.json';
// Product
// The purpose of this remains a mystery
export type Product = t.Branded<
  {
    id?: string;
    agencyId?: string;
    tspProductId?: string;
    name?: string;
    meta?: {};
    icon?: Units_.Url;
    fares?: Array<Fare_.Default>;
    description?: string;
  } & {
    id: {} | null;
    agencyId: {} | null;
    tspProductId: {} | null;
    name: {} | null;
    description: {} | null;
    icon: {} | null;
    fares: {} | null;
  },
  ProductBrand
>;
export const Product = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
      agencyId: t.string,
      tspProductId: t.string,
      name: t.string,
      meta: t.type({}),
      icon: Units_.Url,
      fares: t.array(Fare_.Default),
      description: t.string,
    }),
    t.type({
      id: t.union([t.type({}), t.null]),
      agencyId: t.union([t.type({}), t.null]),
      tspProductId: t.union([t.type({}), t.null]),
      name: t.union([t.type({}), t.null]),
      description: t.union([t.type({}), t.null]),
      icon: t.union([t.type({}), t.null]),
      fares: t.union([t.type({}), t.null]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      agencyId?: string;
      tspProductId?: string;
      name?: string;
      meta?: {};
      icon?: Units_.Url;
      fares?: Array<Fare_.Default>;
      description?: string;
    } & {
      id: {} | null;
      agencyId: {} | null;
      tspProductId: {} | null;
      name: {} | null;
      description: {} | null;
      icon: {} | null;
      fares: {} | null;
    },
    ProductBrand
  > => true,
  'Product',
);
export interface ProductBrand {
  readonly Product: unique symbol;
}
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    agencyId?: Common_.AgencyId;
    products?: Array<Product>;
  } & {
    agencyId: {} | null;
    products: {} | null;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.intersection([
    t.partial({
      agencyId: Common_.AgencyId,
      products: t.array(Product),
    }),
    t.type({
      agencyId: t.union([t.type({}), t.null]),
      products: t.union([t.type({}), t.null]),
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      agencyId?: Common_.AgencyId;
      products?: Array<Product>;
    } & {
      agencyId: {} | null;
      products: {} | null;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
