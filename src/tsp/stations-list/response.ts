/*

undefined
MaaS stations query response schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Station_ from 'maas-schemas-ts/core/components/station';

export const schemaId = 'http://maasglobal.com/tsp/stations-list/response.json';
// Default
// The default export. More information at the top.
export type Default = t.Branded<
  {
    stations?: Array<
      {
        id?: Station_.Id;
        code?: Station_.Code;
        name?: Station_.Name;
        location?: Station_.Location;
        agencyId?: Station_.AgencyId;
        services?: Station_.Services;
        address?: Station_.Address;
        city?: Station_.City;
        country?: Station_.Country;
        zone?: Station_.Zone;
        platformCode?: Station_.PlatformCode;
      } & {
        id: {} | null;
        location: {} | null;
        agencyId: {} | null;
        services: {} | null;
      }
    >;
  },
  DefaultBrand
>;
export const Default = t.brand(
  t.partial({
    stations: t.array(
      t.intersection([
        t.partial({
          id: Station_.Id,
          code: Station_.Code,
          name: Station_.Name,
          location: Station_.Location,
          agencyId: Station_.AgencyId,
          services: Station_.Services,
          address: Station_.Address,
          city: Station_.City,
          country: Station_.Country,
          zone: Station_.Zone,
          platformCode: Station_.PlatformCode,
        }),
        t.type({
          id: t.union([t.type({}), t.null]),
          location: t.union([t.type({}), t.null]),
          agencyId: t.union([t.type({}), t.null]),
          services: t.union([t.type({}), t.null]),
        }),
      ]),
    ),
  }),
  (
    x,
  ): x is t.Branded<
    {
      stations?: Array<
        {
          id?: Station_.Id;
          code?: Station_.Code;
          name?: Station_.Name;
          location?: Station_.Location;
          agencyId?: Station_.AgencyId;
          services?: Station_.Services;
          address?: Station_.Address;
          city?: Station_.City;
          country?: Station_.Country;
          zone?: Station_.Zone;
          platformCode?: Station_.PlatformCode;
        } & {
          id: {} | null;
          location: {} | null;
          agencyId: {} | null;
          services: {} | null;
        }
      >;
    },
    DefaultBrand
  > => true,
  'Default',
);
export interface DefaultBrand {
  readonly Default: unique symbol;
}

export default Default;

// Success
